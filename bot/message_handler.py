from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from loguru import logger

from .config import config
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
from .db import db

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id: int) -> bool:
    return user_id in config.ADMIN_USER_IDS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ –¢—É—Ä—Ü–∏–∏ (—Ä–µ–≥–∏–æ–Ω—ã –ê–ª–∞–Ω–∏—è –∏ –ì–∞–∑–∏–ø–∞—à–∞)."
    )
    
    if is_admin(user_id):
        welcome_text += (
            "\n\nüîë –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/pending - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏\n"
            "/approved - –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "/run_parser - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä—É—á–Ω—É—é\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º"
        )
    else:
        welcome_text += (
            "\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
        )
    
    await message.answer(welcome_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    user_id = message.from_user.id
    
    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ –¢—É—Ä—Ü–∏–∏ (–ê–ª–∞–Ω–∏—è –∏ –ì–∞–∑–∏–ø–∞—à–∞).\n"
    )
    
    if is_admin(user_id):
        help_text += (
            "\n<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
            "‚Ä¢ /pending - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è\n"
            "‚Ä¢ /approved - –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "‚Ä¢ /run_parser - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä—É—á–Ω—É—é\n"
            "‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
        )
    
    help_text += (
        "\n–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –∏—Ö "
        "—Å –ø–æ–º–æ—â—å—é –ò–ò –∏ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—É–±–ª–∏–∫—É–µ—Ç –≤ –≥—Ä—É–ø–ø—É."
    )
    
    await message.answer(help_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /pending (–ø–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏)
@router.message(Command("pending"))
async def cmd_pending(message: Message):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
    pending_articles = db.get_pending_articles(limit=5)
    
    if not pending_articles:
        await message.answer("üîç –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return
    
    await message.answer(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending_articles)} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for article_id, source, original, processed in pending_articles:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{article_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{article_id}")
            ],
            [
                InlineKeyboardButton(text="üîç –û—Ä–∏–≥–∏–Ω–∞–ª", callback_data=f"original_{article_id}")
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        article_text = (
            f"<b>ID —Å—Ç–∞—Ç—å–∏:</b> {article_id}\n"
            f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}\n\n"
            f"{processed}\n\n"
            f"<i>–ü—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏</i>"
        )
        
        await message.answer(article_text, parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /approved (–ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏)
@router.message(Command("approved"))
async def cmd_approved(message: Message):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
    approved_articles = db.get_approved_not_posted_articles()
    
    if not approved_articles:
        await message.answer("üîç –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return
    
    await message.answer(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(approved_articles)} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for article_id, content in approved_articles:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"publish_{article_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{article_id}")
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        article_text = (
            f"<b>ID —Å—Ç–∞—Ç—å–∏:</b> {article_id}\n\n"
            f"{content}\n\n"
            f"<i>–≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</i>"
        )
        
        await message.answer(article_text, parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith(("approve_", "reject_", "publish_", "cancel_", "original_")))
async def process_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ ID —Å—Ç–∞—Ç—å–∏
    action, article_id_str = callback.data.split("_")
    article_id = int(article_id_str)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    article = db.get_article_by_id(article_id)
    
    if not article:
        await callback.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    if action == "approve":
        # –û–¥–æ–±—Ä—è–µ–º —Å—Ç–∞—Ç—å—é
        if db.approve_article(article_id):
            await callback.message.edit_text(
                f"{callback.message.text}\n\n‚úÖ <b>–°—Ç–∞—Ç—å—è –æ–¥–æ–±—Ä–µ–Ω–∞</b>",
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ –°—Ç–∞—Ç—å—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏", show_alert=True)
    
    elif action == "reject":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ–π
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå <b>–°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>",
            parse_mode="HTML"
        )
        await callback.answer("‚ùå –°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    
    elif action == "publish":
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é
        if db.mark_as_posted(article_id):
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É
            # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
            await callback.message.edit_text(
                f"{callback.message.text}\n\nüì¢ <b>–°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é</b>",
                parse_mode="HTML"
            )
            await callback.answer("üì¢ –°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏", show_alert=True)
    
    elif action == "cancel":
        # –û—Ç–º–µ–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        await callback.message.edit_text(
            f"{callback.message.text}\n\nüõë <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
            parse_mode="HTML"
        )
        await callback.answer("üõë –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    elif action == "original":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        original_text = article["original_content"]
        await callback.message.answer(
            f"<b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ ID {article_id}:</b>\n\n{original_text}",
            parse_mode="HTML"
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞)
@router.message(Command("status"))
async def cmd_status(message: Message):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
    status_text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
        "‚úÖ API Gemini –¥–æ—Å—Ç—É–ø–Ω–æ\n"
        "‚úÖ –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∞–∫—Ç–∏–≤–µ–Ω\n\n"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    pending_count = len(db.get_pending_articles(limit=100))
    approved_count = len(db.get_approved_not_posted_articles(limit=100))
    
    status_text += (
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {pending_count}\n"
        f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {approved_count}\n"
    )
    
    await message.answer(status_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /run_parser (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞)
@router.message(Command("run_parser"))
async def cmd_run_parser(message: Message):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    
    # –í –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    await message.answer("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_other_messages(message: Message):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
    if is_admin(message.from_user.id) and message.text:
        await message.answer(
            "–Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/pending - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏\n"
            "/approved - –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "/run_parser - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä—É—á–Ω—É—é\n"
            "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º"
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await message.answer(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
        ) 